export declare function sleep(ms: number): Promise<void>;
export declare function retryWithBackoff<T>(fn: () => Promise<T>, maxRetries?: number, baseDelay?: number, maxDelay?: number): Promise<T>;
export declare function debounce<T extends (...args: any[]) => any>(func: T, wait: number): (...args: Parameters<T>) => void;
export declare function throttle<T extends (...args: any[]) => any>(func: T, limit: number): (...args: Parameters<T>) => void;
export declare function deepClone<T>(obj: T): T;
export declare function deepMerge<T extends Record<string, any>>(target: T, source: Partial<T>): T;
export declare function pick<T extends Record<string, any>, K extends keyof T>(obj: T, keys: K[]): Pick<T, K>;
export declare function omit<T extends Record<string, any>, K extends keyof T>(obj: T, keys: K[]): Omit<T, K>;
export declare function groupBy<T>(array: T[], keyFn: (item: T) => string): Record<string, T[]>;
export declare function chunk<T>(array: T[], size: number): T[][];
export declare function unique<T>(array: T[]): T[];
export declare function uniqueBy<T>(array: T[], keyFn: (item: T) => any): T[];
export declare function flatten<T>(array: (T | T[])[]): T[];
export declare function randomInt(min: number, max: number): number;
export declare function randomString(length: number, charset?: string): string;
export declare function formatNumber(num: number): string;
export declare function formatCurrency(amount: number, currency?: string): string;
export declare function formatDate(date: Date, format?: string): string;
export declare function calculatePercentage(value: number, total: number): number;
export declare function clamp(num: number, min: number, max: number): number;
export declare function isEmpty(value: any): boolean;
export declare function toCamelCase(str: string): string;
export declare function toKebabCase(str: string): string;
export declare function truncate(str: string, length: number, suffix?: string): string;
//# sourceMappingURL=helpers.d.ts.map